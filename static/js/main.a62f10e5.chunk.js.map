{"version":3,"sources":["Canvas.js","App.js","reportWebVitals.js","index.js"],"names":["Canvas","props","canvasRef","useRef","contextRef","useState","isDrawing","setIsDrawing","canvas","current","useEffect","width","window","innerWidth","height","innerHeight","style","context","getContext","lineCap","lineWidth","pdf","className","onMouseDown","nativeEvent","offsetX","offsetY","beginPath","moveTo","onMouseUp","closePath","onMouseMove","lineTo","stroke","strokeStyle","color","ref","id","onClick","doc","jsPDF","internal","pageSize","getWidth","getHeight","addImage","save","App","setColor","type","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAOe,SAASA,EAAOC,GAE9B,IAAMC,EAAUC,iBAAO,MACjBC,EAAWD,iBAAO,MAHa,EAINE,oBAAS,GAJH,mBAI9BC,EAJ8B,KAIpBC,EAJoB,KAKlCC,EAAON,EAAUO,QACpBC,qBAAU,YACPF,EAAON,EAAUO,SACXE,MAAMC,OAAOC,WAAW,EAC/BL,EAAOM,OAAOF,OAAOG,YAAY,EAChCP,EAAOQ,MAAML,MAAb,yBACDH,EAAOQ,MAAMF,OAAb,0BAEA,IAAMG,EAAST,EAAOU,WAAW,MACjCD,EAAQE,QAAQ,QAChBF,EAAQG,UAAU,EAClBhB,EAAWK,QAAQQ,IAEnB,IAEF,IAYGI,EA6BD,OACI,gCACI,wBAAQC,UAAU,SACdC,YA5CK,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,YACVC,EAAkBD,EAAlBC,QAASC,EAASF,EAATE,QAChBtB,EAAWK,QAAQkB,YACnBvB,EAAWK,QAAQmB,OAAOH,EAAQC,GAClCnB,GAAa,IAyCHsB,UAtCI,WACdzB,EAAWK,QAAQqB,YACnBvB,GAAa,IAqCHwB,YAdH,SAAC,GAAiB,IAAhBP,EAAe,EAAfA,YACT,GAAIlB,EAAJ,CADwB,IAIlBmB,EAAiBD,EAAjBC,QAAQC,EAASF,EAATE,QACdtB,EAAWK,QAAQuB,OAAOP,EAAQC,GAClCtB,EAAWK,QAAQwB,SACnB7B,EAAWK,QAAQyB,YAAYjC,EAAMkC,QAQ3BC,IAAKlC,IAET,wBAAQoB,UAAU,WAAWe,GAAG,MAAMC,QApChD,WACG,IAAI3B,EAAQH,EAAOG,MACfG,EAASN,EAAOM,OAEhByB,EAAI,IAAIC,IAGVnB,EADCV,EAAQG,EACH,IAAI0B,IAAM,IAAK,KAAM,CAAC7B,EAAOG,IAG7B,IAAI0B,IAAM,IAAK,KAAM,CAAC1B,EAAQH,IAGtCA,EAAQ4B,EAAIE,SAASC,SAASC,WAC9B7B,EAASyB,EAAIE,SAASC,SAASE,YAC/BvB,EAAIwB,SAASrC,EAAQ,MAAO,EAAG,EAAEG,EAAM,IAAIG,GAC3CO,EAAIyB,KAAK,iBAoBF,iCC7BIC,MAzCf,WAAgB,IAAD,EAEY1C,mBAAS,QAFrB,mBAEJ8B,EAFI,KAEEa,EAFF,KAuBZ,OACE,sBAAK1B,UAAU,MAAf,UACE,sBAAKA,UAAU,QAAf,UAEM,qBAAK2B,KAAK,SAAU3B,UAAU,MAAMgB,QAtB3C,WACGU,EAAS,UAsBL,qBAAKC,KAAK,SAAU3B,UAAU,QAAQgB,QAZ9C,WACEU,EAAS,YAYH,qBAAKC,KAAK,SAAU3B,UAAU,SAASgB,QAhB/C,WACEU,EAAS,aAgBH,qBAAKC,KAAK,SAAU3B,UAAU,OAAOgB,QArB7C,WACEU,EAAS,cAuBT,cAAChD,EAAD,CAAQmC,MAAOA,QC3BPe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a62f10e5.chunk.js","sourcesContent":["\r\nimport React from 'react'\r\n\r\nimport  {useState,useRef,useEffect} from 'react';\r\nimport jsPDF from 'jspdf'\r\n\r\n\r\nexport default function Canvas(props) {\r\n\r\n const canvasRef=useRef(null);\r\n const contextRef=useRef(null);\r\n const [isDrawing,setIsDrawing]=useState(false);\r\nlet canvas=canvasRef.current;\r\n useEffect(()=>{\r\n    canvas=canvasRef.current;\r\n   canvas.width=window.innerWidth/2;\r\n   canvas.height=window.innerHeight/2;\r\n    canvas.style.width= `$(window.innerWidth)px`;\r\n   canvas.style.height=`$(window.innerHeight)px`;\r\n\r\n   const context= canvas.getContext('2d');\r\n   context.lineCap=\"round\";\r\n   context.lineWidth=5;\r\n   contextRef.current=context;\r\n\r\n },[])\r\n\r\n const startDrawing=({nativeEvent})=>{\r\n     const {offsetX, offsetY}=nativeEvent;\r\n     contextRef.current.beginPath();\r\n     contextRef.current.moveTo(offsetX,offsetY);\r\n     setIsDrawing(true);\r\n }\r\n\r\n const stopDrawing=()=>{\r\n     contextRef.current.closePath()\r\n     setIsDrawing(false);\r\n\r\n }\r\nlet pdf;\r\n function printCanvas() {\r\n    let width = canvas.width; \r\n    let height = canvas.height;\r\n\r\n    var doc=new jsPDF();\r\n   \r\n    if(width > height){\r\n      pdf = new jsPDF('l', 'px', [width, height]);\r\n    }\r\n    else{\r\n      pdf = new jsPDF('p', 'px', [height, width]);\r\n    }\r\n    \r\n    width = doc.internal.pageSize.getWidth();\r\n    height = doc.internal.pageSize.getHeight();\r\n    pdf.addImage(canvas, 'PNG', 0, 0,width+500,height);\r\n    pdf.save(\"download.pdf\");\r\n  }\r\n\r\n const draw=({nativeEvent})=>{\r\n     if(!isDrawing){\r\n       return;\r\n     }\r\n     const{offsetX,offsetY}=nativeEvent;\r\n     contextRef.current.lineTo(offsetX,offsetY);\r\n     contextRef.current.stroke()\r\n     contextRef.current.strokeStyle=props.color\r\n }\r\n   return (\r\n       <div  >\r\n           <canvas className=\"Canvas\"\r\n               onMouseDown={startDrawing}\r\n               onMouseUp={stopDrawing}\r\n               onMouseMove={draw}\r\n               ref={canvasRef}\r\n           />\r\n           <button className=\"download\" id=\"pdf\" onClick={printCanvas}>Download the PDF</button>\r\n       </div>\r\n   )\r\n}\r\n","//import logo from './logo.svg';\nimport './App.css';\nimport {useState} from 'react';\nimport Canvas from './Canvas'\n\n\nfunction App() {\n  \n      let [color,setColor]=useState(\"blue\")\n      \n\n      function redColor(){\n         setColor(\"red\")\n     }\n \n     function blueColor(){\n       setColor(\"blue\")\n     }\n \n     function yellowColor(){\n       setColor(\"yellow\")\n     }\n     function greenColor(){\n       setColor(\"green\")\n     }\n\n    \n\n   \n   return (\n     <div className=\"App\">\n       <div className=\"color\" >\n         \n             <div type=\"button\"  className=\"red\" onClick={redColor} ></div>\n             <div type=\"button\"  className=\"green\" onClick={greenColor} ></div>\n             <div type=\"button\"  className=\"yellow\" onClick={yellowColor} ></div>\n             <div type=\"button\"  className=\"blue\" onClick={blueColor}></div>\n             \n       </div>\n       <Canvas color={color}>\n       \n       </Canvas>\n       \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}